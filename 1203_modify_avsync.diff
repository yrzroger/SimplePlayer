diff --git a/SimplePlayer.cpp b/SimplePlayer.cpp
index d44b432..cb64987 100755
--- a/SimplePlayer.cpp
+++ b/SimplePlayer.cpp
@@ -43,7 +43,6 @@ SimplePlayer::SimplePlayer()
       mEndOfStream(0),
       mStartTimeRealUs(-1ll),
       mEncounteredInputEOS(false),
-      mEncounteredOutputEOS(false),
       firstFrameObserved(false) {
 }
 
@@ -111,8 +110,7 @@ status_t SimplePlayer::reset() {
 }
 
 bool SimplePlayer::isPlaying() {
-    return !mEncounteredOutputEOS;
-    //return mEndOfStream;
+    return mEndOfStream;
 }
 
 void SimplePlayer::onMessageReceived(const sp<AMessage> &msg) {
@@ -270,7 +268,7 @@ void SimplePlayer::onMessageReceived(const sp<AMessage> &msg) {
             status_t err = onDoMoreStuff();
 
             if (err == OK) {
-                msg->post(10000ll);
+                msg->post(5000ll);
             }
             break;
         }
@@ -328,9 +326,8 @@ status_t SimplePlayer::onPrepare() {
 
         if(isVideo) state->mType = VIDEO;
         if(isAudio) state->mType = AUDIO;
-        
+
         mEndOfStream |= 0x1 << state->mType;
-        ALOGD("%x", mEndOfStream);
 
         state->mNumFramesWritten = 0;
         state->mCodec = MediaCodec::CreateByType(
@@ -435,6 +432,33 @@ status_t SimplePlayer::onReset() {
 
 status_t SimplePlayer::onDoMoreStuff() {
     ALOGV("onDoMoreStuff");
+
+    for (size_t i = 0; i < mStateByTrackIndex.size(); ++i) {
+        size_t trackIndex;
+        status_t err = mExtractor->getSampleTrackIndex(&trackIndex);
+        CodecState *state = &mStateByTrackIndex.editValueFor(trackIndex);
+    
+        if(state->mSampleData.size() <= 5) {
+            if(err == OK) {
+                size_t sampleSize = 0;
+                CHECK_EQ(mExtractor->getSampleSize(&sampleSize), (status_t)OK);
+                
+                sp<ABuffer> abuffer = new ABuffer(sampleSize);
+                CHECK_EQ(mExtractor->readSampleData(abuffer), (status_t)OK);
+            
+                int64_t timeUs = 0;
+                CHECK_EQ(mExtractor->getSampleTime(&timeUs), (status_t)OK);
+                abuffer->meta()->setInt64("timeUs" , timeUs);
+    
+                state->mSampleData.push_back(abuffer);
+                ALOGV("push_back => track %zu,type %zu, sample data size=%d", trackIndex, state->mType, state->mSampleData.size());
+                mExtractor->advance();
+            } else {
+                mEncounteredInputEOS = true;
+            }
+        }
+    }
+
     for (size_t i = 0; i < mStateByTrackIndex.size(); ++i) {
         CodecState *state = &mStateByTrackIndex.editValueAt(i);
 
@@ -442,15 +466,15 @@ status_t SimplePlayer::onDoMoreStuff() {
         do {
             size_t index;
             err = state->mCodec->dequeueInputBuffer(&index);
-
+    
             if (err == OK) {
                 ALOGV("dequeued input buffer on track %zu,type %zu",
-                      mStateByTrackIndex.keyAt(i), state->mType);
-
+                    mStateByTrackIndex.keyAt(i), state->mType);
+    
                 state->mAvailInputBufferIndices.push_back(index);
             } else {
                 ALOGV("dequeueInputBuffer on track %zu,type %zu returned %d",
-                      mStateByTrackIndex.keyAt(i), state->mType, err);
+                    mStateByTrackIndex.keyAt(i), state->mType, err);
             }
         } while (err == OK);
 
@@ -462,11 +486,11 @@ status_t SimplePlayer::onDoMoreStuff() {
                     &info.mSize,
                     &info.mPresentationTimeUs,
                     &info.mFlags);
-
+    
             if (err == OK) {
                 ALOGV("OK: dequeued output buffer on track %zu,type %zu",
-                      mStateByTrackIndex.keyAt(i), state->mType);
-
+                    mStateByTrackIndex.keyAt(i), state->mType);
+    
                 state->mAvailOutputBufferInfos.push_back(info);
             } else if (err == INFO_FORMAT_CHANGED) {
                 err = onOutputFormatChanged(mStateByTrackIndex.keyAt(i), state);
@@ -476,45 +500,19 @@ status_t SimplePlayer::onDoMoreStuff() {
                 CHECK_EQ(err, (status_t)OK);
             } else {
                 ALOGV("ERROR: dequeueOutputBuffer on track %zu,type %zu returned %d",
-                      mStateByTrackIndex.keyAt(i), state->mType, err);
+                    mStateByTrackIndex.keyAt(i), state->mType, err);
             }
         } while (err == OK
                 || err == INFO_FORMAT_CHANGED
                 || err == INFO_OUTPUT_BUFFERS_CHANGED);
-    }
-
-    size_t trackIndex;
-    for (;;) {
-        
-        status_t err = mExtractor->getSampleTrackIndex(&trackIndex);
-        CodecState *state = &mStateByTrackIndex.editValueFor(trackIndex);
-
-        if(err == OK && state->mSampleData.size() <= 5) {
-            size_t sampleSize = 0;
-            CHECK_EQ(mExtractor->getSampleSize(&sampleSize), (status_t)OK);
-            
-            sp<ABuffer> abuffer = new ABuffer(sampleSize);
-            CHECK_EQ(mExtractor->readSampleData(abuffer), (status_t)OK);
-
-            int64_t timeUs = 0;
-            CHECK_EQ(mExtractor->getSampleTime(&timeUs), (status_t)OK);
-            abuffer->meta()->setInt64("timeUs" , timeUs);
-
-            state->mSampleData.push_back(abuffer);
-            ALOGV("push_back => track %zu,type %zu, sample data size=%d", trackIndex, state->mType, state->mSampleData.size());
-
-            mExtractor->advance();
-        }
 
         if (state->mAvailInputBufferIndices.empty()) {
-            ALOGI("available InputBuffer empty on track %zu,type %zu.", trackIndex, state->mType);
-            break;
+            ALOGI("available InputBuffer empty on track %zu,type %zu.", i, state->mType);
+            continue;
         }
 
         if (state->mSampleData.empty()) {
-            if(!mEncounteredInputEOS) {
-                mEncounteredInputEOS = true;
-
+            if(mEncounteredInputEOS) {
                 size_t index = *state->mAvailInputBufferIndices.begin();
                 state->mAvailInputBufferIndices.erase(
                         state->mAvailInputBufferIndices.begin());
@@ -524,13 +522,13 @@ status_t SimplePlayer::onDoMoreStuff() {
                         0,
                         0,
                         MediaCodec::BUFFER_FLAG_EOS);
-                ALOGI("encountered input EOS on track %zu,type %zu %s.", trackIndex, state->mType, statusToString(err).c_str());
+                ALOGI("encountered input EOS on track %zu,type %zu %s.", i, state->mType, statusToString(err).c_str());
                 CHECK_EQ(err, (status_t)OK);
             }
-            break;
+            continue;
         }
 
-        while(!state->mSampleData.empty() && !state->mAvailInputBufferIndices.empty()) {
+        do {
             size_t index = *state->mAvailInputBufferIndices.begin();
             state->mAvailInputBufferIndices.erase(
                     state->mAvailInputBufferIndices.begin());
@@ -544,7 +542,7 @@ status_t SimplePlayer::onDoMoreStuff() {
             memcpy(dstBuffer->base(), srcBuffer->data(), srcBuffer->size());
             dstBuffer->setRange(0, srcBuffer->size());
             srcBuffer->meta()->findInt64("timeUs", &timeUs);
-            ALOGV("erase => track %zu,type %zu, sample data size=%d", trackIndex, state->mType, state->mSampleData.size());
+            ALOGV("erase => track %zu,type %zu, sample data size=%d", i, state->mType, state->mSampleData.size());
 
             err = state->mCodec->queueInputBuffer(
                     index,
@@ -554,8 +552,9 @@ status_t SimplePlayer::onDoMoreStuff() {
                     0);
             CHECK_EQ(err, (status_t)OK);
 
-            ALOGV("enqueued input data on track %zu,type %zu,timeUs=%lld", trackIndex, state->mType, timeUs);
-        }
+            ALOGV("enqueued input data on track %zu,type %zu,timeUs=%lld", i, state->mType, timeUs);
+        } while (!state->mSampleData.empty()
+                && !state->mAvailInputBufferIndices.empty());
     }
 
     int64_t nowUs = ALooper::GetNowUs();
@@ -571,12 +570,9 @@ status_t SimplePlayer::onDoMoreStuff() {
             BufferInfo *info = &*state->mAvailOutputBufferInfos.begin();
 
             if(info->mFlags & MediaCodec::BUFFER_FLAG_EOS) {
-                ALOGI("encountered output EOS on track %zu,type %zu.", trackIndex, state->mType);
-                mEncounteredOutputEOS = true;
-                
                 mEndOfStream &= ~(0x1 << state->mType);
-                ALOGD("xxxxx %x", mEndOfStream);
-                //if(!mEndOfStream)
+                ALOGI("encountered output EOS on track %zu,type %zu, mEndOfStream %x.", i, state->mType, mEndOfStream);
+                if(!mEndOfStream)
                     return ERROR_END_OF_STREAM;
             }
 
diff --git a/SimplePlayer.h b/SimplePlayer.h
index 9f0ab18..a84d5c1 100755
--- a/SimplePlayer.h
+++ b/SimplePlayer.h
@@ -109,7 +109,6 @@ private:
 
     int64_t mStartTimeRealUs;
     bool mEncounteredInputEOS;
-    bool mEncounteredOutputEOS;
     bool firstFrameObserved;
     wp<CodecEventListener> mListener;
 
